import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from sensor_msgs.msg import Image
from nav_msgs.msg import Odometry
import cv2
from cv_bridge import CvBridge
import numpy as np
import math

class LineFollower(Node):
    def __init__(self):
        super().__init__('line_follower')
        self.publisher_ = self.create_publisher(Twist, 'cmd_vel', 10)
        self.subscription = self.create_subscription(Image, 'camera/rgb/image_raw', self.listener_callback, 10)
        self.odom_subscription = self.create_subscription(Odometry, 'odom', self.odom_callback, 10)
        self.bridge = CvBridge()
        self.initial_pose = None
        self.current_pose = None
        self.lap_count = 0
        self.max_laps = 3
        self.has_started = False

    def listener_callback(self, data):
        if self.lap_count >= self.max_laps:
            twist = Twist()
            twist.linear.x = 0.0
            twist.angular.z = 0.0
            self.publisher_.publish(twist)
            self.get_logger().info('Completed 3 laps. Stopping the robot.')
            return

        cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        hsv = cv2.cvtColor(cv_image, cv2.COLOR_BGR2HSV)
        lower_red = np.array([0, 100, 100])
        upper_red = np.array([10, 255, 255])
        mask = cv2.inRange(hsv, lower_red, upper_red)
        h, w, d = cv_image.shape
        search_top = int(3*h/4)
        search_bot = search_top + 20
        mask[0:search_top, 0:w] = 0
        mask[search_bot:h, 0:w] = 0
        M = cv2.moments(mask)
        if M['m00'] > 0:
            cx = int(M['m10']/M['m00'])
            cy = int(M['m01']/M['m00'])
            err = cx - w/2
            twist = Twist()
            twist.linear.x = 0.2
            twist.angular.z = -float(err) / 100
            self.publisher_.publish(twist)

    def odom_callback(self, msg):
        self.current_pose = msg.pose.pose
        if self.initial_pose is None:
            self.initial_pose = self.current_pose

        if self.has_started:
            distance = self.calculate_distance(self.initial_pose, self.current_pose)
            if distance < 0.5:  # Assuming the robot has returned to the starting point
                self.lap_count += 1
                self.get_logger().info(f'Lap {self.lap_count} completed.')
                if self.lap_count < self.max_laps:
                    self.has_started = False  # Prepare for the next lap

        else:
            distance = self.calculate_distance(self.initial_pose, self.current_pose)
            if distance > 1.0:  # Assuming the robot has moved far enough to consider it started
                self.has_started = True

    def calculate_distance(self, pose1, pose2):
        dx = pose1.position.x - pose2.position.x
        dy = pose1.position.y - pose2.position.y
        return math.sqrt(dx * dx + dy * dy)


def main(args=None):
    rclpy.init(args=args)
    line_follower = LineFollower()
    rclpy.spin(line_follower)
    line_follower.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
